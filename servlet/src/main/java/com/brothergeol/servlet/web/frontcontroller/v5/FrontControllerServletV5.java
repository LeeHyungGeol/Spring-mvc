package com.brothergeol.servlet.web.frontcontroller.v5;import com.brothergeol.servlet.web.frontcontroller.ModelView;import com.brothergeol.servlet.web.frontcontroller.MyView;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;import lombok.RequiredArgsConstructor;import org.apache.tomcat.util.http.fileupload.MultipartStream.ItemInputStream;@RequiredArgsConstructor@WebServlet(name = "frontControllerServletV5", urlPatterns = "/front-controller/v5/*")public class FrontControllerServletV5 extends HttpServlet {//    private final Map<String, Object> handlerMappingMap = new HashMap<>();//    private final List<MyHandlerAdapter> handlerAdapters = new ArrayList<>();//    public FrontControllerServletV5() {//        initHandlerMappingMap();//        initHandlerAdapters();//    }////    private void initHandlerMappingMap() {//        handlerMappingMap.put("/front-controller/v5/v2/members/new-form", new MemberFormControllerV2());//        handlerMappingMap.put("/front-controller/v5/v2/members/save", new MemberSaveControllerV2());//        handlerMappingMap.put("/front-controller/v5/v2/members", new MemberListControllerV2());////        handlerMappingMap.put("/front-controller/v5/v3/members/new-form", new MemberFormControllerV3());//        handlerMappingMap.put("/front-controller/v5/v3/members/save", new MemberSaveControllerV3());//        handlerMappingMap.put("/front-controller/v5/v3/members", new MemberListControllerV3());////        handlerMappingMap.put("/front-controller/v5/v4/members/new-form", new MemberFormControllerV4());//        handlerMappingMap.put("/front-controller/v5/v4/members/save", new MemberSaveControllerV4());//        handlerMappingMap.put("/front-controller/v5/v4/members", new MemberListControllerV4());//    }////    private void initHandlerAdapters() {//        handlerAdapters.add(new ControllerV3HandlerAdapter());//        handlerAdapters.add(new ControllerV4HandlerAdapter());//        handlerAdapters.add(new ControllerV2HandlerAdapter());//    }    private final HandlerMappingMap handlerMappingMap;    private final HandlerAdapterList handlerAdapterList;    @Override    protected void service(HttpServletRequest request, HttpServletResponse response)        throws ServletException, IOException {        Object handler = getHandler(request);        if (handler == null) {            response.setStatus(HttpServletResponse.SC_NOT_FOUND);            return;        }        MyHandlerAdapter handlerAdapter = getHandlerAdapter(handler);        ModelView modelView = handlerAdapter.handle(request, response, handler);        String viewName = modelView.getViewName();// 논리이름        MyView view = viewResolver(viewName);        view.render(modelView.getModel(), request, response);    }    private Object getHandler(HttpServletRequest request) {        return handlerMappingMap.getHandler(request);    }    private MyHandlerAdapter getHandlerAdapter(Object handler) {        return handlerAdapterList.getHandlerAdapter(handler);    }    private MyView viewResolver(String viewName) {        return new MyView("/WEB-INF/views/" + viewName + ".jsp"); // 물리이름    }}