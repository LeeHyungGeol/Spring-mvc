package com.brothergeol.exception.api;import com.brothergeol.exception.api.ApiExceptionController.MemberDto;import com.brothergeol.exception.customexception.BadRequestException;import com.brothergeol.exception.customexception.UserException;import com.brothergeol.exception.exceptionhandler.ErrorResult;import jakarta.validation.Valid;import lombok.AllArgsConstructor;import lombok.Data;import lombok.extern.slf4j.Slf4j;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseStatus;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.server.ResponseStatusException;@Slf4j@RestController@RequestMapping("/api2")public class ApiExceptionV2Controller {    @GetMapping("/members/{id}")    public MemberDto getMember(@PathVariable("id") String id) {        if (id.equals("ex")) {            throw new RuntimeException("잘못된 사용자");        }        if (id.equals("bad")) {            throw new IllegalArgumentException("잘못된 입력 값");        }        if (id.equals("user-ex")) {            throw new UserException("사용자 오류");        }        return new MemberDto(id, "hello " + id);    }    @PostMapping("/members/dto")    public TestDto postMember(@Valid @RequestBody TestDto dto, BindingResult bindingResult) {        if (bindingResult.hasErrors()) {            log.info("errors={}", bindingResult);        }        log.info("id: " + dto.getId());        log.info("name: " + dto.getName());        return new TestDto(dto.getId(), "hello " + dto.getName());    }    @Data    @AllArgsConstructor    static class MemberDto {        private String memberId;        private String name;    }    @Data    @AllArgsConstructor    static class TestDto {        private Integer id;        private String name;    }}