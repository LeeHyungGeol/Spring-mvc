package hello.login.web.filter;import hello.login.web.SessionConst;import jakarta.servlet.Filter;import jakarta.servlet.FilterChain;import jakarta.servlet.ServletException;import jakarta.servlet.ServletRequest;import jakarta.servlet.ServletResponse;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.io.IOException;import lombok.extern.slf4j.Slf4j;import org.springframework.util.PatternMatchUtils;@Slf4jpublic class LoginCheckFilter implements Filter {    private static final String[] whitelist = {"/", "/members/add", "/login", "/logout", "/css/*"};    @Override    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {        HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;        HttpServletResponse httpServletResponse = (HttpServletResponse) servletResponse;        String requestURI = httpServletRequest.getRequestURI();        try {            log.info("인증 체크 필터 시작 {}", requestURI);            if (isLoginCheckPatch(requestURI)) {                log.info("인증 체크 로직 실행 {}", requestURI);                HttpSession session = httpServletRequest.getSession(false);                if (session == null || session.getAttribute(SessionConst.LOGIN_MEMBER) == null) {                    //로그인으로 redirect                    httpServletResponse.sendRedirect("/login?redirectURL=" + requestURI);                    return; //여기가 중요, 미인증 사용자는 다음으로 진행하지 않고 끝!                }            }            filterChain.doFilter(httpServletRequest, httpServletResponse);        } catch (Exception e) {            throw e; //예외 로깅 가능 하지만, 톰캣까지 예외를 보내주어야 함        } finally {            log.info("인증 체크 필터 종료 {}", requestURI);        }    }    private boolean isLoginCheckPatch(String requestURI) {        return !PatternMatchUtils.simpleMatch(whitelist, requestURI);    }}